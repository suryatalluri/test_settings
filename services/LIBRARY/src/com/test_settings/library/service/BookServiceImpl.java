/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.test_settings.library.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_settings.library.*;


/**
 * ServiceImpl object for domain model class Book.
 * @see com.test_settings.library.Book
 */
@Service("LIBRARY.BookService")
public class BookServiceImpl implements BookService {


    private static final Logger LOGGER = LoggerFactory.getLogger(BookServiceImpl.class);

    @Autowired
    @Qualifier("LIBRARY.BookDao")
    private WMGenericDao<Book, Integer> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<Book, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "LIBRARYTransactionManager")
     public Page<Book> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "LIBRARYTransactionManager")
    @Override
    public Book create(Book book) {
        LOGGER.debug("Creating a new book with information: {}" , book);
        return this.wmGenericDao.create(book);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "LIBRARYTransactionManager")
    @Override
    public Book delete(Integer bookId) throws EntityNotFoundException {
        LOGGER.debug("Deleting book with id: {}" , bookId);
        Book deleted = this.wmGenericDao.findById(bookId);
        if (deleted == null) {
            LOGGER.debug("No book found with id: {}" , bookId);
            throw new EntityNotFoundException(String.valueOf(bookId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "LIBRARYTransactionManager")
    @Override
    public Page<Book> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all books");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "LIBRARYTransactionManager")
    @Override
    public Page<Book> findAll(Pageable pageable) {
        LOGGER.debug("Finding all books");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "LIBRARYTransactionManager")
    @Override
    public Book findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding book by id: {}" , id);
        Book book=this.wmGenericDao.findById(id);
        if(book==null){
            LOGGER.debug("No book found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return book;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "LIBRARYTransactionManager")
    @Override
    public Book update(Book updated) throws EntityNotFoundException {
        LOGGER.debug("Updating book with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((Integer)updated.getId());
    }

    @Transactional(readOnly = true, value = "LIBRARYTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}



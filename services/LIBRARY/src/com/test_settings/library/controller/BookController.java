/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.test_settings.library.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.test_settings.library.service.BookService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.test_settings.library.*;
import com.test_settings.library.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Book.
 * @see com.test_settings.library.Book
 */
@RestController(value = "LIBRARY.BookController")
@RequestMapping("/LIBRARY/Book")
@Api(description = "Exposes APIs to work with Book resource.", value = "BookController")
public class BookController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BookController.class);

    @Autowired
    @Qualifier("LIBRARY.BookService")
    private BookService bookService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Book instances matching the search criteria.")
    public Page<Book> findBooks(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Books list");
        return bookService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Book instances.")
    public Page<Book> getBooks(Pageable pageable) {
        LOGGER.debug("Rendering Books list");
        return bookService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Book instance associated with the given id.")
    public Book getBook(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Book with id: {}", id);
        Book instance = bookService.findById(id);
        LOGGER.debug("Book details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Book instance associated with the given id.")
    public boolean deleteBook(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Book with id: {}", id);
        Book deleted = bookService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Book instance associated with the given id.")
    public Book editBook(@PathVariable("id") Integer id, @RequestBody Book instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Book with id: {}", instance.getId());
        instance.setId(id);
        instance = bookService.update(instance);
        LOGGER.debug("Book details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new Book instance.")
    public Book createBook(@RequestBody Book instance) {
        LOGGER.debug("Create Book with information: {}", instance);
        instance = bookService.create(instance);
        LOGGER.debug("Created Book with information: {}", instance);
        return instance;
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setBookService(BookService service) {
        this.bookService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Book instances.")
    public Long countAllBooks() {
        LOGGER.debug("counting Books");
        Long count = bookService.countAll();
        return count;
    }
}
